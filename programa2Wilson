package practica;

import java.util.*;

import javax.swing.JFrame;

public class programa2Wilson {
	static Scanner sc = new Scanner(System.in);

	public static void main(String[] args) {
		int col = sizeLab();
		int row = col;
		int[][] mov = { { -1, 0 }, { 0, 1 }, { 1, 0 }, { 0, -1 } };
		String[] id_mov = { "N", "E", "S", "O" };
		LinkedHashMap<String, Cell> cells = new LinkedHashMap<String, Cell>();

		// cell.setvar(neighbours);
		for (int i = 0; i < row; i++) {
			for (int j = 0; j < col; j++) {
				boolean[] neighbours = { false, false, false, false };
				Cell cell = new Cell(0, neighbours, false);
				cells.put("(" + i + "," + j + ")", cell);
			}
		}

		// System.out.println("Keys: "+cells.keySet());
		// Fetching value
		// System.out.println("Values: "+cells.values());
		// Fetching key-value pair

		Iterator it = cells.keySet().iterator();
		while (it.hasNext()) {
			String key = (String) it.next();
			System.out.println("Coordenada: " + key + " -> " + cells.get(key));
		}

		Labyrinth lab = new Labyrinth(row, col, 4, mov, id_mov, cells);
		int ranRow = randomCell(col);
		int ranCol = randomCell(col);
		int ranRow2 = randomCell(col);
		int ranCol2 = randomCell(col);

		System.out.println("Celda aleatoria origen: " + ranRow + "," + ranCol);
		System.out.println("Celda aleatoria destino: " + ranRow2 + "," + ranCol2);

		wilsonAlg(col, ranRow, ranCol, ranRow2, ranCol2, lab);

		JFrame frame = new JFrame("Grupo B1-6 -- Practica de Laboratorio");
		frame.getContentPane().add(new Interface(lab));
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setSize(1280, 720);
		frame.setVisible(true);
	}

	public static int sizeLab() {
		int size;
		System.out.print("Size of your labyrinth: ");
		size = sc.nextInt();
		System.out.println("The size of your labyrinth is: " + size + "x" + size);
		return size;
	}

	public static int randomCell(int col) {
		int ranColOrRow = (int) (Math.random() * (col - 1));
		return ranColOrRow;
	}

	public static void wilsonAlg(int col, int ranRow, int ranCol, int ranRow2, int ranCol2, Labyrinth lab) {

		Map<String, Cell> cells = lab.getCells();

		Map<String, Cell> listNoVisited = lab.getCells();
		Map<String, Cell> listVisited = new LinkedHashMap<String, Cell>();
		Map<String, Cell> listAuxVisited = new LinkedHashMap<String, Cell>();
		int ranRowAux = 0;
		int ranColAux = 0;
		Cell cell = null;
		
		boolean[] neighbours = { false, false, false, false };	//Para hacer el efecto inverso para pintar la celda contigua siguiente

		int ranNei = (int) (Math.random() * 3);
		boolean[] var = new boolean[4];
		boolean end = false;

		do {
			// listAuxVisited = null;
			do {

				ranNei = (int) (Math.random() * 3);
				
				String key = "(" + ranRow2 + "," + ranCol2 + ")";
				cell = cells.get(key);
				var = cell.getNeighbors();

				// Order - N,E,S,W
				if (!end) {
					if (ranNei == 0) {
						if (cell.isVisited() == true && listAuxVisited.keySet().equals(listVisited.keySet())) {
							cell.setVisited(false);
							wilsonAlg(col, ranRow, ranCol, ranRowAux, ranColAux, lab);

						} else {
							if (ranRow2 > 0) {
								var[0] = true;
								cell.setNeighbors(var);
								cell.setVisited(true);
								listNoVisited.remove(key);
								listVisited.put(key, cell);
								listAuxVisited.put(key, cell);

								cells.put("(" + ranRow2 + "," + ranCol2 + ")", cell);
								ranRowAux = ranRow2;
								ranColAux = ranCol2;

								ranRow2 = ranRow2 - 1;
								
								cell = cells.get("(" + ranRow2 + "," + ranCol2 + ")");
								neighbours = cell.getNeighbors();
								neighbours[0] = false;
								neighbours[2] = true;
								cell.setNeighbors(neighbours);
								cells.put("(" + ranRow2 + "," + ranCol2 + ")", cell);

								// North Neighbor

							} else {
								ranNei = 1;
							}
						}
					}
					if (ranNei == 1) {
						if (cell.isVisited() == true && listAuxVisited.keySet().equals(listVisited.keySet())) {
							cell.setVisited(false);
							wilsonAlg(col, ranRow, ranCol, ranRowAux, ranColAux, lab);

						} else {
							if (ranCol2 < col - 1) {
								var[1] = true;
								cell.setNeighbors(var);
								cell.setVisited(true);
								listNoVisited.remove(key);
								listVisited.put(key, cell);
								listAuxVisited.put(key, cell);

								cells.put("(" + ranRow2 + "," + ranCol2 + ")", cell);
								ranRowAux = ranRow2;
								ranColAux = ranCol2;

								ranCol2 = ranCol2 + 1;
								
								cell = cells.get("(" + ranRow2 + "," + ranCol2 + ")");
								neighbours = cell.getNeighbors();
								neighbours[1] = false;
								neighbours[3] = true;
								cell.setNeighbors(neighbours);
								cells.put("(" + ranRow2 + "," + ranCol2 + ")", cell);

								// East Neighbor

							} else {
								ranNei = 2;
							}
						}
					}

					if (ranNei == 2) {
						if (cell.isVisited() == true && listAuxVisited.keySet().equals(listVisited.keySet())) {
							cell.setVisited(false);
							wilsonAlg(col, ranRow, ranCol, ranRowAux, ranColAux, lab);

						} else {
							if (ranRow2 < col - 1) {
								var[2] = true;
								cell.setNeighbors(var);
								cell.setVisited(true);
								listNoVisited.remove(key);
								listVisited.put(key, cell);
								listAuxVisited.put(key, cell);

								cells.put("(" + ranRow2 + "," + ranCol2 + ")", cell);
								ranRowAux = ranRow2;
								ranColAux = ranCol2;

								ranRow2 = ranRow2 + 1;
								
								cell = cells.get("(" + ranRow2 + "," + ranCol2 + ")");
								neighbours = cell.getNeighbors();
								neighbours[2] = false;
								neighbours[0] = true;
								cell.setNeighbors(neighbours);
								cells.put("(" + ranRow2 + "," + ranCol2 + ")", cell);
								// South Neighbor

							} else {
								ranNei = 3;
							}
						}
					}
					if (ranNei == 3) {
						if (cell.isVisited() == true && listAuxVisited.keySet().equals(listVisited.keySet())) {
							cell.setVisited(false);
							wilsonAlg(col, ranRow, ranCol, ranRowAux, ranColAux, lab);

						} else {
							if (ranCol2 > 0) {
								var[3] = true;
								cell.setNeighbors(var);
								cell.setVisited(true);
								listNoVisited.remove(key);
								listVisited.put(key, cell);
								listAuxVisited.put(key, cell);

								cells.put("(" + ranRow2 + "," + ranCol2 + ")", cell);
								ranRowAux = ranRow2;
								ranColAux = ranCol2;

								ranCol2 = ranCol2 - 1;
								
								
								cell = cells.get("(" + ranRow2 + "," + ranCol2 + ")");
								neighbours = cell.getNeighbors();
								neighbours[3] = false;
								neighbours[1] = true;
								cell.setNeighbors(neighbours);
								cells.put("(" + ranRow2 + "," + ranCol2 + ")", cell);
								// West Neighbor

							} else {
								ranNei = 0;
							}
						}

					}
				}
			} while (!(ranRow2 == ranRow && ranCol2 == ranCol));

			// NOTA DEL WHILE DE ARRIBA
			/*
			 * He suprimido del while el || que aparecia otros parametros, lo dejo por aqui:
			 * || cells.get("(" + ranRow + "," + ranCol + ")").isVisited()
			 */

			/*
			 * for (int k = 0; k < listCell.length; k++) { if (listCell[k].isVisited() ==
			 * false) { end = false; } }
			 */

			end = true;
		} while (!end);
	}

	public static void changesMap(Cell cell, Map<String, Cell> listNoVisited, Map<String, Cell> listVisited,
			Map<String, Cell> listAuxVisited, boolean[] var, String key) {

		/*
		 *Falta por simplificar esta parte en las comprobaciones de las celdas, pero daba error en una lista 
		 * 
		 */
		cell.setNeighbors(var);
		cell.setVisited(true);
		listNoVisited.remove(key);
		listVisited.put(key, cell);
		listAuxVisited.put(key, cell);

	}
}
